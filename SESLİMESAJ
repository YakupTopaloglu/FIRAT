import cv2
import socket
import struct
import pickle
import numpy as np
from gtts import gTTS
import random
from playsound import playsound
import os
import threading
from ultralytics import YOLO


class SesliAsistan():
    def __init__(self):
        pass

    def seslendirme(self, metin):
        xtts = gTTS(text=metin, lang="tr")
        dosya = "dosya" + str(random.randint(0, 123)) + ".mp3"
        xtts.save(dosya)
        playsound(dosya)
        os.remove(dosya)


class FiratFrame():
    def __init__(self):
        self.asistan = SesliAsistan()
        self.detected = False
        self.model = YOLO("yolov8n.pt")
        self.class_names = self.model.names

    def baslat(self):
        threading.Thread(target=self.modelkamera).start()

    def modelkamera(self):
        # Socket oluştur
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect(('localhost', 8000))

        data = b""
        payload_size = struct.calcsize("Q")

        while True:
            while len(data) < payload_size:
                packet = client_socket.recv(4 * 1024)
                if not packet:
                    break
                data += packet

            packed_msg_size = data[:payload_size]
            data = data[payload_size:]
            msg_size = struct.unpack("Q", packed_msg_size)[0]

            while len(data) < msg_size:
                packet = client_socket.recv(4 * 1024)
                if not packet:
                    break
                data += packet

            frame_data = data[:msg_size]
            data = data[msg_size:]

            frame = pickle.loads(frame_data)
            person_detected = False

            # YOLO modelini kullanarak tahmin yap
            results = self.model.predict(frame)

            for result in results:
                boxes = result.boxes.xyxy
                scores = result.boxes.conf
                classes = result.boxes.cls

                for box, score, cls in zip(boxes, scores, classes):
                    label = self.class_names[int(cls)]
                    x1, y1, x2, y2 = map(int, box)

                    if label == "person" and score >= 0.5:
                        person_detected = True
                        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.putText(frame, f'{label} {score:.2f}', (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9,
                                    (0, 255, 0), 2)

            if person_detected and not self.detected:
                self.detected = True
                threading.Thread(target=self.asistan.seslendirme, args=("Kişi tespit edildi.",)).start()

            cv2.imshow('FIRAT', frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        client_socket.close()
        cv2.destroyAllWindows()


if __name__ == "__main__":
    kamera_cercevele = FiratFrame()
    kamera_cercevele.baslat()
